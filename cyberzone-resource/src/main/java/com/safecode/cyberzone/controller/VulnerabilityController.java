package com.safecode.cyberzone.controller;

import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.github.pagehelper.PageInfo;
import com.safecode.cyberzone.base.dto.ResponseData;
import com.safecode.cyberzone.base.service.SessionProvider;
import com.safecode.cyberzone.base.support.Code;
import com.safecode.cyberzone.controller.base.BaseController;
import com.safecode.cyberzone.pojo.VulnerabilityCnvd;
import com.safecode.cyberzone.pojo.VulnerabilityNvd;
import com.safecode.cyberzone.service.VulnerabilityService;
import com.safecode.cyberzone.utils.SysLogUtil;
import com.safecode.cyberzone.vo.VulnerabilityCnvdVo;
import com.safecode.cyberzone.vo.VulnerabilityNvdVo;

@RestController
@RequestMapping(value="vulnerability")
public class VulnerabilityController extends BaseController {
	@Autowired
	private VulnerabilityService vulnerabilityService; 
	
	@Autowired
	private SysLogController sysLogController;
	@Autowired
	private SessionProvider sessionProvider;

	/**
	 * CNVD分页列表
	 * @param request
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/get", method = RequestMethod.POST)
	public ResponseData<Object> get(HttpServletRequest request, VulnerabilityCnvdVo vulnerabilityCnvdVo) {
	    	PageInfo<VulnerabilityCnvd> cnvdList = vulnerabilityService.queryPageList(vulnerabilityCnvdVo);
	    	Timestamp lastUpdateTime = vulnerabilityService.getCNVDLastUpdateTime();
	    	Map<Object,Object> map = new HashMap<>();
	    	map.put("cnvdList", cnvdList);
	    	map.put("lastUpdateTime", lastUpdateTime);
	    	return new ResponseData<Object>(Code.OK.value(), "CNVD列表", map);
	}
	
	/**
	 * NVD分页列表
	 * @param request
	 * @param modelMap
	 * @return
	 */
	@RequestMapping(value = "/getNVD", method = RequestMethod.POST)
	public ResponseData<Object> getNVDPageList(HttpServletRequest request, VulnerabilityNvdVo vulnerabilityNvdVo) {
	    	PageInfo<VulnerabilityNvd> nvdList = vulnerabilityService.queryNvdPageList(vulnerabilityNvdVo);
	    	Timestamp lastUpdateTime = vulnerabilityService.getNVDLastUpdateTime();
	    	Map<Object,Object> map = new HashMap<>();
	    	map.put("nvdList", nvdList);
	    	map.put("lastUpdateTime", lastUpdateTime);
	    	return new ResponseData<Object>(Code.OK.value(), "NVD列表", map);
	}
	
	/**
	 * CNVD详情页,关联展示对应的NVD信息
	 * @param request
	 * @param modelMap
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public ResponseData<Object> detail(HttpServletRequest request, @RequestParam(value = "id", required = false) String id) {
	    	Map<String, Object>  bothMap = vulnerabilityService.queryById(id);
	    	return new ResponseData<Object>(Code.OK.value(), "获取详情", bothMap);
    }
	
	/**
	 * 手动更新:手动导入sql脚本文件,实现数据库同步
	 * @param request
	 * @param modelMap
	 * @param sqlFile
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/executeSql", method = RequestMethod.POST)
	public ResponseData<Object> executeSql(HttpServletRequest request, MultipartFile sqlFile) throws Exception {
			vulnerabilityService.readSqlFile(sqlFile, request);
	    	return new ResponseData<Object>(Code.OK.value(), "更新成功", null);
	}
	/**
	 * 在线更新,自动同步数据
	 * @param request
	 * @param modelMap
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/autoSync", method = RequestMethod.GET)
	public ResponseData<Object> autoSync(HttpServletRequest request) throws Exception {
		vulnerabilityService.autoSync();
    	return new ResponseData<Object>(Code.OK.value(), "更新成功", null);
	}
	
	/**
     * 获取威胁情报库的威胁等级及数量(威胁情报库首页的威胁等级)
     * @param request
     * @param response
     * @param modelMap
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/bugCountByServerity", method = RequestMethod.GET)
    public ResponseData<Object> getBugCountByServerity(HttpServletRequest request, HttpServletResponse response) throws Exception {
    	List<Map<String,Object>> bugCountMapList = vulnerabilityService.getBugCountByServerity();
    	return new ResponseData<Object>(Code.OK.value(), "获取威胁等级及数量", bugCountMapList);
    }
    /**
     * 按年度获取威胁数量(威胁情报库首页的时间趋势图)
     * @param request
     * @param response
     * @param modelMap
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/bugCountByYear", method = RequestMethod.GET)
    public ResponseData<Object> getBugCountByYear(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) throws Exception {
    	List<Map<String,Object>> bugCountMapList = vulnerabilityService.getBugCountByYear();
    	return new ResponseData<Object>(Code.OK.value(), "按年度获取威胁数量", bugCountMapList);
    }
    /**
     * 按时间倒序获取10条数据(威胁情报库首页的重点新闻)
     * @param request
     * @param response
     * @param modelMap
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/keyNews", method = RequestMethod.GET)
    public ResponseData<Object> getKeyNews(HttpServletRequest request, HttpServletResponse response) throws Exception {
    	List<VulnerabilityCnvd> cnvdList = vulnerabilityService.getKeyNews();
    	return new ResponseData<Object>(Code.OK.value(), "威胁情报库首页的重点新闻", cnvdList);
    }
    /**
     * 获取威胁情报的类别及数量(威胁情报库首页的情报类别)
     * @param request
     * @param response
     * @param modelMap
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/bugCountByClassify", method = RequestMethod.GET)
    public ResponseData<Object> getBugCountByClassify(HttpServletRequest request, HttpServletResponse response, ModelMap modelMap) throws Exception {
    	List<Map<String,Object>> bugCountMapList = vulnerabilityService.getBugCountByClassify();
    	return new ResponseData<Object>(Code.OK.value(), "获取威胁情报的类别及数量", bugCountMapList);
    }

	
	
}
