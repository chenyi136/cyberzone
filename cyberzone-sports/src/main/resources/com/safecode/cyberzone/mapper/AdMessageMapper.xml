<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.safecode.cyberzone.mapper.AdMessageMapper" >
  <resultMap id="BaseResultMap" type="com.safecode.cyberzone.pojo.AdMessage" >
    <id column="id_" property="id" jdbcType="BIGINT" />
    <result column="title_" property="title" jdbcType="VARCHAR" />
    <result column="source_" property="source" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_by" property="createBy" jdbcType="BIGINT" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="BIGINT" />
    <result column="del_flag" property="delFlag" jdbcType="BIT" />
    <result column="content_" property="content" jdbcType="LONGVARCHAR" />
    <result column="remark_" property="remark" jdbcType="LONGVARCHAR" />
    <result column="if_read" property="ifRead" jdbcType="BIT" />
    <result column="if_collect" property="ifCollect" jdbcType="BIT" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from ad_message
    where id_ = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.safecode.cyberzone.pojo.AdMessage" 
											useGeneratedKeys="true" keyProperty="id">
    insert into ad_message (id_, title_, source_, 
      create_time, create_by, update_time, 
      update_by, del_flag, content_, 
      remark_)
    values (#{id,jdbcType=BIGINT}, #{title,jdbcType=VARCHAR}, #{source,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=BIGINT}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{updateBy,jdbcType=BIGINT}, #{delFlag,jdbcType=BIT}, #{content,jdbcType=LONGVARCHAR}, 
      #{remark,jdbcType=LONGVARCHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.safecode.cyberzone.pojo.AdMessage" >
    update ad_message
    set title_ = #{title,jdbcType=VARCHAR},
      source_ = #{source,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=BIGINT},
      del_flag = #{delFlag,jdbcType=BIT},
      content_ = #{content,jdbcType=LONGVARCHAR},
      remark_ = #{remark,jdbcType=LONGVARCHAR}
    where id_ = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id_, title_, source_, create_time, create_by, update_time, update_by, del_flag, 
    content_, remark_
    from ad_message
    where id_ = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id_, title_, source_, create_time, create_by, update_time, update_by, del_flag, 
    content_, remark_
    from ad_message
  </select>
  
  <!-- 在覆盖自动生成的mapper文件时,注意生成的insert添加了返回自增主键  -->
  <!-- 以下为自定义sql  -->
  
  <!-- 消息分页列表  -->
  <select id="queryPageList" resultMap="BaseResultMap" >
    select ad_message.id_, ad_message.title_, ad_message.source_, ad_message.create_time, ad_message.create_by, ad_message.update_time, ad_message.update_by, ad_message.del_flag, 
    ad_message.content_, ad_message.remark_ , ad_message_user.if_read if_read, ad_message_user.if_collect if_collect
    from ad_message 
    left join ad_message_user on ad_message.id_ = ad_message_user.message_id
	<where>
	   ad_message.del_flag = '0' AND ad_message_user.del_flag = '0' AND ad_message_user.user_id =#{userId} 
		<if test="ifCollect != null and ifCollect != ''">
			AND ad_message_user.if_collect =#{ifCollect} 
		</if>
	</where>
	order by ad_message.create_time desc
  </select>
  
  <!-- 获取未读消息数量  -->
  <select id="getUnreadCount" resultType="java.lang.Integer" parameterType="java.lang.Long">
    select count(message_id)
    from ad_message_user 
    where del_flag ='0' and user_id =#{userId} and if_read='0'
  </select>
 
  <!-- 全部标记为已读   -->
  <update id="setAllReaded" parameterType="java.lang.Long">
    update ad_message_user
    set if_read = '1'
    where del_flag ='0' and user_id = #{userId}
  </update>
  
  <!-- 消息分页列表  -->
  <select id="queryAllAnnouncement" resultType="java.util.Map" >
    select ad_message.id_ id, ad_message.title_ title, ad_message.source_ source ,ad_message.content_ content,  
	sys_user.user_name createByName, ad_message.create_time createTime
    from ad_message, sys_user
    where  ad_message.del_flag='0' and sys_user.del_flag='0' and
    ad_message.source_='1' and sys_user.id_= ad_message.create_by	
    order by ad_message.create_time desc
  </select>
  
  <!-- 消息详情  -->
  <select id="selectById" resultType="java.util.Map" >
    select distinct ad_message.id_ id, ad_message.title_ title, ad_message.source_ source ,ad_message.content_ content,  
	sys_user.user_name createByName, ad_message.create_time createTime
    from ad_message, ad_message_user, sys_user
    where  ad_message.del_flag='0' and sys_user.del_flag='0' and
    ad_message.id_ =#{id} and sys_user.id_= ad_message.create_by	
  </select>
  
  <!-- 消息详情后,标记为已读   -->
  <update id="setReadedById">
    update ad_message_user
    set if_read = '1', update_time=(select now())
    where del_flag ='0' and message_id = #{id} and user_id=#{userId}
  </update>
  
   <!-- 查询消息用户记录  -->
  <select id="getAdMessageUserById" resultType="com.safecode.cyberzone.pojo.AdMessageUser" >
    select id_, message_id, user_id, if_read, if_collect, create_time, create_by, update_time, 
    update_by, del_flag, remark_
    from ad_message_user
    where message_id = #{id} and user_id=#{userId}
  </select>
  
  <!--获取攻防演练团队所有用户id-->
  <select id="selectCorpsUserIds" resultType="java.lang.Long" >
    select distinct user_id from sys_user_corps where del_flag='0'
  </select>
  
   <!--获取任务相关战队的所有用户id-->
  <select id="selectCorpsUserIdsByCorpsId" resultType="java.lang.Long" >
    select distinct user_id from sys_user_corps where del_flag='0' and corps_id=#{corpsId}
  </select>
  
  
</mapper>